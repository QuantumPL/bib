@inproceedings{Xu2022,
 title = {Quartz: Superoptimization of Quantum Circuits},
 author = {Xu, Mingkuan and Li, Zikun and Padon, Oded and Lin, Sina and Pointing, Jessica and Hirth, Auguste and Ma, Henry and Palsberg, Jens and Aiken, Alex and Acar, Umut A. and Jia, Zhihao},
 year = {2022},
 month = {June},
 booktitle = {Proceedings of the 43rd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
 publisher = {{Association for Computing Machinery}},
 address = {New York, NY, USA},
 series = {{{PLDI}} '22},
 pages = {},
 numpages = {16},
 doi = {10.1145/3519939.3523433},
 archiveprefix = {arXiv},
 eprint = {2204.09033},
 url = {https://github.com/quantum-compiler/quartz},
 abstract = {Existing quantum compilers optimize quantum circuits by applying circuit transformations designed by experts. This approach requires significant manual effort to design and implement circuit transformations for different quantum devices, which use different gate sets, and can miss subtle optimizations that are hard to find manually.

We propose Quartz, a quantum circuit superoptimizer that automatically generates and verifies circuit transformations for arbitrary quantum gate sets. Quartz takes as input the set of quantum gates supported by a quantum processor and generates candidate circuit transformations for the target processor by enumerating small circuits over the given gate set. Quartz then formally verifies the candidate transformations using an automated theorem prover. Finally, to optimize a quantum circuit, Quartz uses a cost-based backtracking search, applying the verified transformations to the input circuit.

Our evaluation on three gate sets supported by existing quantum processors shows that Quartz can effectively generate and verify transformations for different gate sets. The generated transformations cover manually designed transformations used by existing optimizers, and also include new transformations. By using these transformations, Quartz's optimizer matches the performance of existing optimizers on one gate set for which they are tuned, and outperforms them on the two other gate sets.},
 keywords = {quantum computing, superoptimization},
 note = {To appear at PLDI 2022},
 webnote = {Previously known as Quanto, arXiv:2111.11387. To appear at PLDI 2022.},
 bibsource = {Quantum Programming Languages \& Verification Bibliography, https://git.io/qpl-bib}
}

