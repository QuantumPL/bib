@article{QuingoTeam2021,
 title = {Quingo: A Programming Framework for Heterogeneous Quantum-Classical Computing with NISQ Features},
 author = {{Quingo Development Team}},
 year = {2021},
 month = {December},
 journal = {ACM Transactions on Quantum Computing},
 publisher = {{Association for Computing Machinery}},
 address = {New York, NY, USA},
 volume = {2},
 number = {4},
 eid = {19},
 pages = {19},
 numpages = {37},
 doi = {10.1145/3483528},
 url = {https://github.com/Quingo},
 abstract = {The increasing control complexity of Noisy Intermediate-Scale Quantum (NISQ) systems underlines the necessity of integrating quantum hardware with quantum software. While mapping heterogeneous quantum-classical computing (HQCC) algorithms to NISQ hardware for execution, we observed a few dissatisfactions in quantum programming languages (QPLs), including difficult mapping to hardware, limited expressiveness, and counter-intuitive code. In addition, noisy qubits require repeatedly performed quantum experiments, which explicitly operate low-level configurations, such as pulses and timing of operations. This requirement is beyond the scope or capability of most existing QPLs.We summarize three execution models to depict the quantum-classical interaction of existing QPLs. Based on the refined HQCC model, we propose the Quingo framework to integrate and manage quantum-classical software and hardware to provide the programmability over HQCC applications and map them to NISQ hardware. We propose a six-phase quantum program life-cycle model matching the refined HQCC model, which is implemented by a runtime system. We also propose the Quingo programming language, an external domain-specific language highlighting timer-based timing control and opaque operation definition, which can be used to describe quantum experiments. We believe the Quingo framework could contribute to the clarification of key techniques in the design of future HQCC systems.},
 keywords = {nisq, quantum compilation, timing control, quantum programming framework, quantum programming language},
 bibsource = {Quantum Programming Languages \& Verification Bibliography, https://git.io/qpl-bib}
}

