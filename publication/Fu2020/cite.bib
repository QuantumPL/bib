@inproceedings{Fu2020,
 title = {Linear {{Dependent Type Theory}} for {{Quantum Programming Languages}}: {{Extended Abstract}}},
 shorttitle = {Linear {{Dependent Type Theory}} for {{Quantum Programming Languages}}},
 author = {Fu, Peng and Kishida, Kohei and Selinger, Peter},
 year = {2020},
 month = {July},
 booktitle = {Proceedings of the 35th {{Annual ACM}}/{{IEEE Symposium}} on {{Logic}} in {{Computer Science}}},
 publisher = {{Association for Computing Machinery}},
 address = {{New York, NY, USA}},
 series = {{{LICS}} '20},
 pages = {440--453},
 doi = {10.1145/3373718.3394765},
 archiveprefix = {arXiv},
 eprint = {2004.13472},
 abstract = {Modern quantum programming languages integrate quantum resources and classical control. They must, on the one hand, be linearly typed to reflect the no-cloning property of quantum resources. On the other hand, high-level and practical languages should also support quantum circuits as first-class citizens, as well as families of circuits that are indexed by some classical parameters. Quantum programming languages thus need linear dependent type theory. This paper defines a general semantic structure for such a type theory via certain fibrations of monoidal categories. The categorical model of the quantum circuit description language Proto-Quipper-M by Rios & Selinger constitutes an example of such a fibration, which means that the language can readily be integrated with dependent types. We then devise both a general linear dependent type system and a dependently typed extension of Proto-Quipper-M, and provide them with operational semantics as well as a prototype implementation.},
 keywords = {proto-quipper-d, fibration, categorical model, quantum programming languages, linear dependent types, proto-quipper-m},
 bibsource = {Quantum Programming Languages \& Verification Bibliography, https://git.io/qpl-bib}
}

