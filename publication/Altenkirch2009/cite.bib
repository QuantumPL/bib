@incollection{Altenkirch2009,
 title = {The {{Quantum IO Monad}}},
 author = {Altenkirch, Thorsten and Green, Alexander S.},
 year = {2009},
 month = {November},
 booktitle = {Semantic Techniques in Quantum Computation},
 editor = {Gay, Simon J. and Mackie, Ian},
 publisher = {{Cambridge University Press}},
 address = {{Cambridge}},
 pages = {173--205},
 crossref = {Gay2009},
 doi = {10.1017/CBO9781139193313.006},
 url = {https://www.cs.nott.ac.uk/~psztxa/g5xnsc/chapter.pdf},
 abstract = {The quantum IO monad is a purely functional interface to quantum programming implemented as a Haskell library. At the same time it provides a constructive semantics of quantum programming. The QIO monad separates reversible (i.e., unitary) and irreversible (i.e., probabilistic) computations and provides a reversible let operation (ulet), allowing us to use ancillas (auxiliary qubits) in a modular fashion. QIO programs can be simulated either by calculating a probability distribution or by embedding it into the IO monad using the random number generator. As an example we present a complete implementation of Shor's algorithm.},
 webnote = {Also see \cite{Green2010} for a reimplementation in Agda.},
 bibsource = {Quantum Programming Languages \& Verification Bibliography, https://git.io/qpl-bib}
}

