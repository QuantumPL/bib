@article{Fu2023,
 title = {Proto-Quipper with Dynamic Lifting},
 author = {Fu, Peng and Kishida, Kohei and Ross, Neil J. and Selinger, Peter},
 year = {2023},
 month = {January},
 journal = {Proceedings of the ACM on Programming Languages},
 volume = {7},
 number = {POPL},
 eid = {11},
 pages = {11},
 doi = {10.1145/3571204},
 archiveprefix = {arXiv},
 eprint = {2204.13041},
 url = {https://gitlab.com/frank-peng-fu/dpq-remake},
 abstract = {Quipper is a functional programming language for quantum computing. Proto-Quipper is a family of languages aiming to provide a formal foundation for Quipper. In this paper, we extend Proto-Quipper-M with a construct called dynamic lifting, which is present in Quipper. By virtue of being a circuit description language, Proto-Quipper has two separate runtimes: circuit generation time and circuit execution time. Values that are known at circuit generation time are called parameters, and values that are known at circuit execution time are called states. Dynamic lifting is an operation that enables a state, such as the result of a measurement, to be lifted to a parameter, where it can influence the generation of the next portion of the circuit. As a result, dynamic lifting enables Proto-Quipper programs to interleave classical and quantum computation. We describe the syntax of a language we call Proto-Quipper-Dyn. Its type system uses a system of modalities to keep track of the use of dynamic lifting. We also provide an operational semantics, as well as an abstract categorical semantics for dynamic lifting based on enriched category theory. We prove that both the type system and the operational semantics are sound with respect to our categorical semantics. Finally, we give some examples of Proto-Quipper-Dyn programs that make essential use of dynamic lifting.},
 keywords = {proto-quipper-dyn, proto-quipper-m, proto-quipper, quipper, quantum programming languages, categorical semantics, dynamic lifting},
 webnote = {POPL '23. Also see the companion paper \cite{Fu2022a}},
 bibsource = {Quantum Programming Languages \& Verification Bibliography, https://git.io/qpl-bib}
}

