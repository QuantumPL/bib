@article{Heim2020a,
 abstract = {Quantum programming languages are essential to translate ideas into instructions that can be executed by a quantum computer. Not only are they crucial to the programming of quantum computers at scale but also they can facilitate the discovery and development of quantum algorithms even before hardware exists that is capable of executing them. Quantum programming languages are used for controlling existing physical devices, for estimating the execution costs of quantum algorithms on future devices, for teaching quantum computing concepts, or for verifying quantum algorithms and their implementations. They are used by newcomers and seasoned practitioners, researchers and developers working on the next ground-breaking discovery or applying known concepts to real-world problems. This variety in purpose and target audiences is reflected in the design and ecosystem of the existing quantum programming languages, depending on which factors a language prioritizes. In this Review, we highlight important aspects of quantum programming and how it differs from conventional programming. We overview a selection of several state-of-the-art quantum programming languages, highlight their salient features, and provide code samples for each of the languages and Docker files to facilitate installation of the software packages.},
 author = {Heim, Bettina and Soeken, Mathias and Marshall, Sarah and Granade, Chris and Roetteler, Martin and Geller, Alan and Troyer, Matthias and Svore, Krysta M.},
 doi = {10.1038/s42254-020-00245-7},
 journal = {Nature Reviews Physics},
 month = {December},
 note = {Content overlap with Ch. 6--7 of \cite{Heim2020}},
 number = {12},
 pages = {709--722},
 timestamp = {2021-04-18},
 title = {Quantum Programming Languages},
 url = {https://github.com/msr-quarc/quantum-languages-review},
 volume = {2},
 year = {2020}
}

