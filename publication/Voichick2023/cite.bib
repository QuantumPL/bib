@article{Voichick2023,
 title = {Qunity: A Unified Language for Quantum and Classical Computing},
 author = {Voichick, Finn and Li, Liyi and Rand, Robert and Hicks, Michael},
 year = {2023},
 month = {January},
 journal = {Proceedings of the ACM on Programming Languages},
 volume = {7},
 number = {POPL},
 eid = {32},
 pages = {32},
 doi = {10.1145/3571225},
 archiveprefix = {arXiv},
 eprint = {2204.12384},
 url = {https://gitlab.umiacs.umd.edu/finn/qunity},
 abstract = {We introduce Qunity, a new quantum programming language designed to treat quantum computing as a natural generalization of classical computing. Qunity presents a unified syntax where familiar programming constructs can have both quantum and classical effects. For example, one can use sum types to implement the direct sum of linear operators, exception handling syntax to implement projective measurements, and aliasing to induce entanglement. Further, Qunity takes advantage of the overlooked BQP subroutine theorem, allowing one to construct reversible subroutines from irreversible quantum algorithms through the uncomputation of "garbage" outputs. Unlike existing languages that enable quantum aspects with separate add-ons (like a classical language with quantum gates bolted on), Qunity provides a unified syntax along with a novel denotational semantics that guarantees that programs are quantum mechanically valid. We present Qunity's syntax, type system, and denotational semantics, showing how it can cleanly express several quantum algorithms. We also detail how Qunity can be compiled to a low-level qubit circuit language like OpenQASM, proving the realizability of our design.},
 keywords = {algebraic data types, reversible computing, quantum subroutines, kraus operators},
 webnote = {POPL '23. See extended version on arXiv.},
 bibsource = {Quantum Programming Languages \& Verification Bibliography, https://git.io/qpl-bib}
}

