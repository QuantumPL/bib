@inproceedings{Altenkirch2005,
 title = {A Functional Quantum Programming Language},
 author = {Altenkirch, Thorsten and Grattage, Jonathan},
 year = {2005},
 month = {June},
 booktitle = {Proceedings of the 20th Annual IEEE Symposium on Logic in Computer Science},
 publisher = {{IEEE Computer Society}},
 address = {Los Alamitos, CA, USA},
 series = {{{LICS}} '05},
 pages = {249--258},
 doi = {10.1109/LICS.2005.1},
 archiveprefix = {arXiv},
 eprint = {quant-ph/0409065},
 abstract = {We introduce the language QML, a functional language for quantum computations on finite types. Its design is guided by its categorical semantics: QML programs are interpreted by morphisms in the category FQC of finite quantum computations, which provides a constructive semantics of irreversible quantum computations realisable as quantum gates. QML integrates reversible and irreversible quantum computations in one language, using first order strict linear logic to make weakenings explicit. Strict programs are free from decoherence and hence preserve superpositions and entanglement - which is essential for quantum parallelism.},
 keywords = {quantum computing, quantum entanglement, functional programming, quantum gates, formal logic, quantum entanglement, functional languages},
 webnote = {Introduces QML, see also \cite{Grattage2011}},
 bibsource = {Quantum Programming Languages \& Verification Bibliography, https://git.io/qpl-bib}
}

